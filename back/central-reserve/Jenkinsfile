// File: back/central-reserve/Jenkinsfile

pipeline {
  agent any

  environment {
    AWS_REGION  = 'us-east-1'
    ECR_REPO    = 'public.ecr.aws/d3a6d4r1/cam/reserve'
    TAG         = 'latest'
    DEPLOY_HOST = '100.26.102.240'
    DEPLOY_DIR  = '/home/ubuntu/reserve'
  }

  stages {
    stage('Checkout') {
      steps {
        // Clona todo el monorepo, luego entra a tu subcarpeta
        checkout([
          $class: 'GitSCM',
          branches: [[name: 'origin/main']],
          userRemoteConfigs: [[
            url: 'https://github.com/secamc93/reserve.git',
            credentialsId: 'github-creds'
          ]]
        ])
        dir('back/central-reserve') {
          echo "Estamos en ${pwd()}"
        }
      }
    }

    stage('Build & Push Docker') {
      steps {
        dir('back/central-reserve') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'aws-creds'
          ]]) {
            sh '''
              # Login a ECR Público
              aws ecr-public get-login-password --region $AWS_REGION | \
                docker login --username AWS --password-stdin public.ecr.aws

              # Build y tag
              docker build -f docker/Dockerfile -t $ECR_REPO:$TAG .
              docker tag $ECR_REPO:$TAG $ECR_REPO:latest

              # Push
              docker push $ECR_REPO:$TAG
              docker push $ECR_REPO:latest
            '''
          }
        }
      }
    }

    stage('Deploy to EC2') {
      steps {
        // Si Jenkins corre en la misma EC2 puede ejecutarlo local
        // Sino usar sshagent(['deploy-key']) { … }
        sh """
          ssh -o StrictHostKeyChecking=no ubuntu@$DEPLOY_HOST \\
            'cd $DEPLOY_DIR && \\
             docker compose pull && \\
             docker compose up -d'
        """
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
